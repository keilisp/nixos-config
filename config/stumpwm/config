;; -*- lisp -*-

(in-package :stumpwm)

;; (ql:quickload :slynk)                   ; Later the slynk-server will be injected
;; (ql:quickload "clx-truetype")           ; For TTF-font support

;; (swank:create-server
;;  :dont-close t
;;  :port swank::default-server-port)

(slynk:create-server :port 4004
                     :dont-close t)

;;;
(defvar *config-dir* "~/.config/stumpwm")

(defcommand reload-dotfiles () ()
  (load (concat *config-dir* "/config"))
  (message "Config reloaded"))
(define-key *top-map* (kbd "s-R") "reload-dotfiles")

;; (load (concat *config-dir* "/core/core.lisp"))


(defun show-key-seq (key seq val)
  (message (print-key-seq (reverse seq))))
(add-hook *key-press-hook* 'show-key-seq)


;;;; Config
;;; Appearance
(setf *mouse-focus-policy* :click)
;; (set-font "-*-terminus-medium-r-*-*-24-*-*-*-*-*-iso10646-1")
;; Message window font
;;NOTE: ttf font config moved to *first-load* section
;; (set-font "-xos4-terminus-medium-r-normal--20-140-72-72-c-80-iso8859-15")
;; (set-font "-*-terminus-bold-r-*-*-22-*-*-*-*-*-iso8859-*")
;; (set-font "10x20-cyrillic")
;;(set-font "-*-terminus-medium-r-*-*-22-*-*-*-*-*-iso10646-1")
;; (set-font "Iosevka Term:size=16")
;; (load-module "ttf-fonts")
;; (xft:cache-fonts)
;; (set-font (make-instance 'xft:font :family "Iosevka Term" :subfamily "Regular" :size 14))
;;


;;; Keybinds
;; (set-prefix-key (kbd "C-z"))
(set-prefix-key (kbd "s-s"))

(let ((map *top-map*))
  (dotimes (i 9)
    (define-key map (kbd (format nil "s-~D" i))
      (format nil "gselect ~D" i))))

(loop for ch in '(#\) #\! #\@ #\# #\$ #\% #\^ #\& #\* #\()
      and i from 0 to 9
      do (let ((key (kbd (format nil "s-~A" ch)))
               (action (format nil "gmove ~A" i)))
           (define-key *top-map* key action)))


;; Window management

(define-key *top-map* (kbd "s-m") "fullscreen")
(define-key *top-map* (kbd "s-M") "only")
(define-key *top-map* (kbd "s-t") "toggle-always-on-top")
(define-key *top-map* (kbd "s-T") "toggle-always-show")

(define-key *top-map* (kbd "s-f") "float-this")
(define-key *top-map* (kbd "s-F") "unfloat-this")

(define-key *top-map* (kbd "s-S") "run-shell-command")

(define-key *top-map* (kbd "s-h") "move-focus left")
(define-key *top-map* (kbd "s-j") "move-focus down")
(define-key *top-map* (kbd "s-k") "move-focus up")
(define-key *top-map* (kbd "s-l") "move-focus right")

(define-key *top-map* (kbd "s-H") "move-window left")
(define-key *top-map* (kbd "s-J") "move-window down")
(define-key *top-map* (kbd "s-K") "move-window up")
(define-key *top-map* (kbd "s-L") "move-window right")

(setf *resize-increment* 20)
(define-key *top-map* (kbd "M-H") "resize-direction left")
(define-key *top-map* (kbd "M-J") "resize-direction up")
(define-key *top-map* (kbd "M-K") "resize-direction down")
(define-key *top-map* (kbd "M-L") "resize-direction right")
(define-key *top-map* (kbd "s-r") "iresize")


(define-key *top-map* (kbd "C-s-h") "exchange-direction left")
(define-key *top-map* (kbd "C-s-j") "exchange-direction down")
(define-key *top-map* (kbd "C-s-k") "exchange-direction up")
(define-key *top-map* (kbd "C-s-l") "exchange-direction right")

(define-key *top-map* (kbd "s-RET") "exec alacritty")
(define-key *top-map* (kbd "s-SPC") "exec dmenu_run")

(define-key *top-map* (kbd "s-n")   "next-in-frame")
(define-key *top-map* (kbd "s-p")   "prev-in-frame")

(define-key *top-map* (kbd "s-`")   "exec scratch")
(define-key *top-map* (kbd "s-;")   "colon")
(define-key *top-map* (kbd "s-e")   "exec")
(define-key *top-map* (kbd "s-E")   "eval")


(defvar *window-manipulation-map* (make-sparse-keymap))

(defcommand kill-or-delete-window () ()
  (and (delete-window)
       (remove-split)))

(define-key *top-map* (kbd "s-x") "delete-window")
(define-key *top-map* (kbd "s-X") "kill-or-delete-window")
(define-key *top-map* (kbd "s-w") *window-manipulation-map*)
(let ((map *window-manipulation-map*))
  (define-key map (kbd "s-c") "remove-split")
  (define-key map (kbd "s-s") "vsplit")
  (define-key map (kbd "s-v") "hsplit"))

;;; Groups
;; (defvar *kei/groups* (list "   Ⅰ   " "   Ⅱ   " "   Ⅲ   " "   Ⅳ   " "   Ⅴ   " "   Ⅵ   " "   Ⅶ   " "   Ⅷ   "))
(defvar *kei/groups* (list "  1  " "  2  " "  3  " "  4  " "  5  " "  6  " "  7  " "   8  "))
(grename (nth 0 *kei/groups*))
(dolist (workspace (cdr *kei/groups*))
  (gnewbg workspace))

;;; Modeline
(setf *bar-med-color* "^B^3")
(setf *bar-hi-color* "^B^3")
(setf *bar-crit-color* "^B^1")

;;; This will repack window numbers every time a window is killed
(stumpwm:add-hook stumpwm:*destroy-window-hook*
                  #'(lambda (win) (stumpwm:repack-window-numbers)))

(setf *colors*
      '("#101216"  ; fg
        "#f9a03f"  ; orange
        "#8BD49C"  ; green
        "#8abeb7"  ; cyan
        "#5EC4FF"  ; blue
        "#cc6666"  ; red
        "#E27E8D"  ; magenta
        "#f0c674"  ; yellow
        ))

(update-color-map (current-screen))

(setf *group-format* " %t "
      *window-format* "\{%n\}%m%s%20t "
      *windows-border-style* :thin
      *normal-border-width* 1
      *mode-line-timeout* 1
      *message-window-gravity* :center
      *input-window-gravity* :center
      *transient-border-width* 1
      stumpwm::*float-window-border* 2
      stumpwm::*float-window-title-height* 15)

(setf *time-modeline-string* "^B^3 %e %b %H:%M ^n")

(set-focus-color (elt *colors* 6))
(set-unfocus-color (elt *colors* 0))

(setf *screen-mode-line-format*
      (list "^B^3%g ^n^b %W ^>  "
            "  %B  %d"
            ))

(setf *mode-line-border-width* 0)
(setf *mode-line-pad-x* 0)
(setf *mode-line-pad-y* 0)
(setf *mode-line-background-color* (elt *colors* 0))
(setf *mode-line-foreground-color* (elt *colors* 1))

(unless (head-mode-line (current-head))
  (toggle-mode-line (current-screen) (current-head)))


;;;;;;;
;; ;;
;; ;; Adjust brightness - now in redshift's settings
;; (define-key *root-map* (kbd "M-b") "colon1 exec xbacklight -set ")
;; ;;
;; ;; Browse somewhere
;; (define-key *root-map* (kbd "o") "colon1 exec sensible-browser https://www.")
;; ;;
;; ;; Web Jumps (for search engines)
;; (defmacro make-web-jump (name prefix)
;;   `(defcommand ,(intern name) (search) ((:rest ,(concatenate 'string name " query: ")))
;;     (substitute #\+ #\Space search)
;;     (run-shell-command (concatenate 'string "sensible-browser " ,prefix search))))

;; (make-web-jump "google-search"    "https://www.google.ru/search?q=")
;; (make-web-jump "academia-search"  "https://www.google.ru/scholar?q=")
;; (make-web-jump "goodreads-search" "https://www.goodreads.com/search?q=")
;; (make-web-jump "libgen-search"    "https://libgen.is/search.php?req=")
;; (make-web-jump "yandex-search"    "https://yandex.ru/search/?text=")
;; (make-web-jump "video-search"     "https://www.youtube.com/results?search_query=")
;; (make-web-jump "imdb-search"      "https://www.imdb.com/find?q=")
;; (make-web-jump "kinopoisk-search" "https://www.kinopoisk.ru/index.php/kp_query=")
;; (make-web-jump "rutracker-search" "https://www.rutracker.org/forum/tracker.php?nm=")
;; (make-web-jump "picture-search"   "https://www.yandex.ru/images/search/?text=")

;; (defvar *web-search-bindings*
;;   (let ((m (make-sparse-keymap)))
;;     (define-key m (kbd "/") "google-search")
;;     (define-key m (kbd "g") "google-search")
;;     (define-key m (kbd "a") "academia-search")
;;     (define-key m (kbd "b") "goodreads-search")
;;     (define-key m (kbd "l") "libgen-search")
;;     (define-key m (kbd "y") "yandex-search")
;;     (define-key m (kbd "v") "video-search")
;;     (define-key m (kbd "i") "imdb-search")
;;     (define-key m (kbd "k") "kinopoisk-search")
;;     (define-key m (kbd "t") "rutracker-search")
;;     (define-key m (kbd "p") "picture-search")
;;     m))

;; (define-key *root-map* (kbd "C-/") '*web-search-bindings*)
;; (define-key *root-map* (kbd "/")   '*web-search-bindings*)

;; Keyboard layouts
;; (load-module "kbd-layouts")
;; (kbd-layouts::keyboard-layout-list "us" "ru")

;; Amixer
;; (load-module "amixer")
;; (define-key *top-map* (kbd "XF86AudioLowerVolume") "amixer-Master-1-")
;; (define-key *top-map* (kbd "XF86AudioRaiseVolume") "amixer-Master-1+")
;; (define-key *top-map* (kbd "XF86AudioMute") "amixer-Master-toggle pulse")

;; Alert-Me-At utility command
;; (load-module "alert-me")

;; WiFi
;; (load-module "wifi")

;; CPU
;; (load-module "cpu")
;; (setf cpu::*cpu-modeline-fmt* "%c%t")

;; Mem
;; (load-module "mem")
;; (setf mem::*mem-modeline-fmt* "MEM:%p")

;; Tray
;; (load-module "stumptray")

;; (setf stumpwm:*screen-mode-line-format*
;;       (list "%d ^[^B^3|^] "
;;             "%I ^[^B^3|^] "
;;             "BATT: " '(:eval (run-shell-command "upower -i $(upower -e | grep \'BAT\') | grep percentage | awk \'\{printf $(NF)\}\'" t))
;;             " ^[^B^3|^] "
;;             "%M^[^B^3|^] "
;;             "%C ^[^B^3|^] "
;;             "^B^6%N^n"))
